{"version":3,"sources":["components/game-square/square.jsx","utility/squareObj.js","utility/gameChecker.js","components/game-board/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","state","value","this","mark","className","onClick","React","Component","SquareValue","key","i","j","equal","orther","isSameValue","isComponentValue","Checker","check","squareValue","squares","checkSubDiagonal","checkCol","checkRow","checkMainDiagonal","twoHeadBlock","count","x","y","console","log","Board","init","arr","Array","fill","length","setState","player","win","checkWin","square","handleClick","squaresBoard","map","squareRow","squareM","renderSquare","renderRow","winner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dfa67da.chunk.js","sourcesContent":["import React from 'react';\r\nimport './square.css';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props.value)\r\n        const value=this.props.value;\r\n        let mark='';\r\n        if(value===1){\r\n            mark='X';\r\n        }else if(value===2){\r\n            mark='O';\r\n        }\r\n\r\n        return (\r\n            <button\r\n                className=\"square\"\r\n                onClick={() => this.props.onClick()}\r\n            >\r\n                {mark}\r\n            </button>\r\n        );\r\n    }\r\n}\r\nexport default Square;","class SquareValue {\r\n    value = 0;\r\n    key = 0;\r\n    i = 0;\r\n    j = 0;\r\n    constructor(value, key, i, j) {\r\n        this.value = value;\r\n        this.key = key;\r\n        this.i = i;\r\n        this.j = j;\r\n    }\r\n    equal = (orther) => {\r\n        if (orther.key === this.key) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    isSameValue = (orther) => {\r\n        if (orther.value === this.value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    isComponentValue = (orther) => {\r\n        if (orther.value !== this.value && orther.value !== 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport default SquareValue;","import SquareValue from './squareObj';\r\nclass Checker {\r\n    static check = (squareValue, squares) => {\r\n        return this.checkSubDiagonal(squareValue, squares) || this.checkCol(squareValue, squares)\r\n            || this.checkRow(squareValue, squares) || this.checkMainDiagonal(squareValue, squares);\r\n    }\r\n    static checkCol = (squareValue, squares) => {\r\n        //console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        while (x < 20) {\r\n            if (squareValue.isSameValue(squares[x][squareValue.j])) {\r\n                count++;\r\n                x++;\r\n            } else {\r\n                //console.log(squares[x][squareValue.j].value);\r\n                if (squares[x][squareValue.j].value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        while (x >= 0) {\r\n            var value = squares[x][squareValue.j];\r\n            if (squareValue.isSameValue(value)) {\r\n                count++;\r\n                x--;\r\n            } else {\r\n                //console.log(squares[x][squareValue.j].value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                }else{\r\n                    twoHeadBlock=false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        //console.log('Count col', count);\r\n        return (count === 5) && !twoHeadBlock ? true : false;\r\n    }\r\n    static checkRow = (squareValue, squares) => {\r\n        //console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.j + 1;\r\n        while (x < 20) {\r\n\r\n            var value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count++;\r\n                x++;\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        x = squareValue.j - 1;\r\n        while (x >= 0) {\r\n\r\n\r\n            var value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count++;\r\n                x--;\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                }else{\r\n                    twoHeadBlock=false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        //console.log('Count row', count);\r\n        return (count === 5) && !twoHeadBlock ? true : false;\r\n    }\r\n    static checkMainDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j + 1;\r\n        while (x < 20 && y < 20) {\r\n\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x++;\r\n                y++;\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j - 1;\r\n        while (x >= 0 && y >= 0) {\r\n\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x--;\r\n                y--;\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                }else{\r\n                    twoHeadBlock=false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        //console.log('Check Main Diagonal', count);\r\n\r\n        return (count === 5) && !twoHeadBlock ? true : false;\r\n    }\r\n    static checkSubDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j - 1;\r\n        while (x < 20 && y >= 0) {\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x++;\r\n                y--;\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                }else{\r\n                    twoHeadBlock=false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j + 1;\r\n        while (x >= 0 && y < 20) {\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x--;\r\n                y++;\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                }else{\r\n                    twoHeadBlock=false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        console.log('Check Sub Diagonal', count);\r\n        console.log('twoHeadBlock',twoHeadBlock);\r\n        return (count === 5) && !twoHeadBlock ? true : false;\r\n    }\r\n}\r\nexport default Checker;","import React from 'react';\r\nimport Square from '../game-square/square';\r\nimport './board.css';\r\nimport SquareValue from '../../utility/squareObj';\r\nimport Checker from '../../utility/gameChecker';\r\n\r\nclass Board extends React.Component {\r\n    constructor() {\r\n        super();\r\n        let arr = new Array(20).fill(0);\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = new Array(20);\r\n            for (var j = 0; j < arr[i].length; j++) {\r\n                arr[i][j] = new SquareValue(0, i * 10 * 2 + j, i, j);\r\n            }\r\n        }\r\n        this.state = {\r\n            squares: arr,\r\n            player: 1,\r\n            win: false\r\n        };\r\n    }\r\n    init = () => {\r\n        let arr = new Array(20).fill(0);\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = new Array(20);\r\n            for (var j = 0; j < arr[i].length; j++) {\r\n                arr[i][j] = new SquareValue(0, i * 10 * 2 + j, i, j);\r\n            }\r\n        }\r\n        console.log(arr);\r\n        this.setState()\r\n        this.setState({\r\n            squares: arr,\r\n            player: 1,\r\n            win: false\r\n        });\r\n        \r\n    }\r\n    checkWin = (square) => {\r\n        //console.log('square checkwin', square);\r\n        //Checker.check(square, this.state.squares);\r\n        if (Checker.check(square, this.state.squares)) {\r\n            this.setState({\r\n                win: true,\r\n            })\r\n        }\r\n    }\r\n    handleClick = (square) => {\r\n        const squaresBoard = this.state.squares.map((squareRow) => {\r\n            squareRow.map(squareM => {\r\n                if (squareM.equal(square)) {\r\n                    //console.log('map', squareM);\r\n                    if (squareM.value === 0) {\r\n                        squareM.value = this.state.player;\r\n                        this.checkWin(squareM);\r\n                        this.setState({\r\n                            player: this.state.player === 1 ? 2 : 1\r\n                        });\r\n                        //console.log('player', this.state.player)\r\n                    }\r\n                }\r\n                return squareM;\r\n            })\r\n            return squareRow;\r\n        })\r\n\r\n        this.setState({ squares: squaresBoard });\r\n    }\r\n    renderSquare = (square) => {\r\n        return <Square\r\n            value={square.value} key={square.key}\r\n            onClick={() => this.handleClick(square)} />;\r\n    }\r\n    renderRow = (squareRow) => {\r\n        return (\r\n            <div className='square-row' key={'row' + squareRow[0].key}>\r\n                <div>\r\n                    {squareRow.map(square => this.renderSquare(square))}\r\n                </div>\r\n                <br></br>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        if (this.state.win) {\r\n            let winner = this.state.player === 1 ? 'O' : 'X';\r\n            return (\r\n                <div>\r\n                    <h1>Congratulation Player {winner}</h1>\r\n                    <button onClick={this.init}>Play again</button>\r\n                </div>\r\n            )\r\n        } else\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        <h1>{this.state.player === 1 ? 'X' : 'O'}</h1>\r\n                    </div>\r\n                    <div className='board'>\r\n                        {this.state.squares.map(squareRow => this.renderRow(squareRow))}\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}\r\nexport default Board;","import React from 'react';\n\nimport Board from './components/game-board/board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}