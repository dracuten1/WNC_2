{"version":3,"sources":["components/game-square/square.jsx","components/game-board/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","state","value","console","log","this","mark","className","onClick","React","Component","SquareValue","key","equal","orther","isSameValue","Board","checkWin","square","handleClick","squaresBoard","squares","map","squareRow","squareM","player","setState","renderSquare","renderRow","arr","Array","fill","i","length","j","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTA+BeA,G,kBA3BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,MAHI,E,sEAOT,IAAD,OACLC,QAAQC,IAAIC,KAAKL,MAAME,OACvB,IAAMA,EAAMG,KAAKL,MAAME,MACnBI,EAAK,GAOT,OANW,IAARJ,EACCI,EAAK,IACQ,IAARJ,IACLI,EAAK,KAIL,4BACIC,UAAU,SACVC,QAAS,kBAAM,EAAKR,MAAMQ,YAEzBF,O,GAvBIG,IAAMC,YCArBC,G,MAGF,WAAYT,EAAOU,GAAM,IAAD,gCAFxBV,MAAQ,EAEgB,KADxBU,IAAM,EACkB,KAIxBC,MAAQ,SAACC,GACL,OAAIA,EAAOF,MAAQ,EAAKA,KALJ,KAUxBG,YAAc,SAACD,GACX,OAAIA,EAAOZ,QAAU,EAAKA,OAV1BG,KAAKH,MAAQA,EACbG,KAAKO,IAAMA,IAoGJI,E,YApEX,aAAe,IAAD,uBACV,+CAcJC,SAAW,SAACC,KAfE,EAkBdC,YAAc,SAACD,GACX,IAAME,EAAe,EAAKnB,MAAMoB,QAAQC,KAAI,SAACC,GAczC,OAbAA,EAAUD,KAAI,SAAAE,GAWV,OAVIA,EAAQX,MAAMK,KACdf,QAAQC,IAAI,MAAOoB,GACG,IAAlBA,EAAQtB,QACRsB,EAAQtB,MAAQ,EAAKD,MAAMwB,OAC3B,EAAKC,SAAS,CACVD,OAA8B,IAAtB,EAAKxB,MAAMwB,OAAe,EAAI,IAE1CtB,QAAQC,IAAI,SAAU,EAAKH,MAAMwB,UAGlCD,KAEJD,KAGX,EAAKG,SAAS,CAAEL,QAASD,KApCf,EAsCdO,aAAe,SAACT,GACZ,OAAO,kBAAC,EAAD,CACHhB,MAAOgB,EAAOhB,MAAOU,IAAKM,EAAON,IACjCJ,QAAS,kBAAM,EAAKW,YAAYD,OAzC1B,EA2CdU,UAAY,SAACL,GAGT,OACI,yBAAKhB,UAAU,aAAaK,IAAK,MAAQW,EAAU,GAAGX,KAClD,6BACKW,EAAUD,KAAI,SAAAJ,GAAM,OAAI,EAAKS,aAAaT,OAE/C,+BAhDR,IADA,IAAIW,EAAM,IAAIC,MAAM,IAAIC,KAAK,GACpBC,EAAI,EAAGA,EAAIH,EAAII,OAAQD,IAAK,CACjCH,EAAIG,GAAK,IAAIF,MAAM,IACnB,IAAK,IAAII,EAAI,EAAGA,EAAIL,EAAIG,GAAGC,OAAQC,IAC/BL,EAAIG,GAAGE,GAAK,IAAIvB,EAAY,EAAO,GAAJqB,EAAS,EAAIE,GAN1C,OASV/B,QAAQC,IAAIyB,GACZ,EAAK5B,MAAQ,CACToB,QAASQ,EACTJ,OAAQ,GAZF,E,sEAuDJ,IAAD,OACL,OACI,6BACI,6BACI,4BAA2B,IAAtBpB,KAAKJ,MAAMwB,OAAe,IAAM,MAEzC,yBAAKlB,UAAU,SACVF,KAAKJ,MAAMoB,QAAQC,KAAI,SAAAC,GAAS,OAAI,EAAKK,UAAUL,Y,GA/DpDd,IAAMC,W,MC1BXyB,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCIc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea0ee618.chunk.js","sourcesContent":["import React from 'react';\r\nimport './square.css';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.value)\r\n        const value=this.props.value;\r\n        let mark='';\r\n        if(value===1){\r\n            mark='X';\r\n        }else if(value===2){\r\n            mark='O';\r\n        }\r\n\r\n        return (\r\n            <button\r\n                className=\"square\"\r\n                onClick={() => this.props.onClick()}\r\n            >\r\n                {mark}\r\n            </button>\r\n        );\r\n    }\r\n}\r\nexport default Square;","import React from 'react';\r\nimport Square from '../game-square/square';\r\nimport './board.css';\r\nclass SquareValue {\r\n    value = 0;\r\n    key = 0;\r\n    constructor(value, key) {\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n    equal = (orther) => {\r\n        if (orther.key === this.key) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    isSameValue = (orther) => {\r\n        if (orther.value === this.value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n// class SquareRow {\r\n//     value = 0;\r\n//     key = 0;\r\n//     constructor(value, key) {\r\n//         this.value = value * 10 + key;\r\n//         this.key = value * 10 + key;\r\n//     }\r\n//     equal = (orther) => {\r\n//         if(typeof(orther)===SquareValue){\r\n//             if(orther.key===SquareValue.key){\r\n//                 return true;\r\n//             }\r\n//         }\r\n//         return false;\r\n//     }\r\n// }\r\nclass Board extends React.Component {\r\n    constructor() {\r\n        super();\r\n        let arr = new Array(20).fill(0);\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = new Array(20);\r\n            for (var j = 0; j < arr[i].length; j++) {\r\n                arr[i][j] = new SquareValue(0, i * 10 * 2 + j);\r\n            }\r\n        }\r\n        console.log(arr);\r\n        this.state = {\r\n            squares: arr,\r\n            player: 1\r\n        };\r\n    }\r\n    checkWin = (square) => {\r\n        \r\n    }\r\n    handleClick = (square) => {\r\n        const squaresBoard = this.state.squares.map((squareRow) => {\r\n            squareRow.map(squareM => {\r\n                if (squareM.equal(square)) {\r\n                    console.log('map', squareM);\r\n                    if (squareM.value === 0) {\r\n                        squareM.value = this.state.player;\r\n                        this.setState({\r\n                            player: this.state.player === 1 ? 2 : 1\r\n                        });\r\n                        console.log('player', this.state.player)\r\n                    }\r\n                }\r\n                return squareM;\r\n            })\r\n            return squareRow;\r\n        })\r\n\r\n        this.setState({ squares: squaresBoard });\r\n    }\r\n    renderSquare = (square) => {\r\n        return <Square\r\n            value={square.value} key={square.key}\r\n            onClick={() => this.handleClick(square)} />;\r\n    }\r\n    renderRow = (squareRow) => {\r\n        //console.log('row'+squareRow[0].key);\r\n\r\n        return (\r\n            <div className='square-row' key={'row' + squareRow[0].key}>\r\n                <div>\r\n                    {squareRow.map(square => this.renderSquare(square))}\r\n                </div>\r\n                <br></br>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>{this.state.player === 1 ? 'X' : 'O'}</h1>\r\n                </div>\r\n                <div className='board'>\r\n                    {this.state.squares.map(squareRow => this.renderRow(squareRow))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Board;","import React from 'react';\n\nimport Board from './components/game-board/board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}